{"version":3,"sources":["audios/KnockinOnHeavenDoor.mp3","audios/index.js","helpers/timer.js","App.js","serviceWorker.js","index.js","covers/KnockinOnHeavenDoor.jpg"],"names":["module","exports","audios","src","KnockinOnHeavenDoor","title","artist","album","cover","Covers","constructTimeMMSS","timeElapsed","minute","Math","floor","second","App","audioRef","useRef","useState","audioIndex","setAudioIndex","currentTime","setCurrentTime","duration","setDuration","isPlay","setPlay","className","alt","onClick","length","icon","faBackward","current","pause","play","faPauseCircle","faPlayCircle","faForward","axis","xmax","x","onChange","styles","track","backgroundColor","margin","height","active","thumb","marginTop","width","borderRadius","ref","onLoadedData","onTimeUpdate","onEnded","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,iD,wOCa5BC,EAXA,CAEb,CACEC,IAAKC,IACLC,MAAO,4BACPC,OAAQ,YACRC,MAAO,mEACPC,MAAOC,MCTLC,EAAoB,SAACC,GACzB,IAAIC,EAASC,KAAKC,MAAMH,EAAc,IAClCI,EAASF,KAAKC,MAAMH,EAAc,GAAKC,GAC3C,MAAM,GAAN,OAAUA,EAAS,GAAK,IAAMA,EAASA,EAAvC,cACEG,EAAS,GAAK,IAAMA,EAASA,ICqHlBC,EA7GH,WACV,IAAMC,EAAWC,mBADD,EAEoBC,mBAAS,GAF7B,mBAETC,EAFS,KAEGC,EAFH,OAGsBF,mBAAS,GAH/B,mBAGTG,EAHS,KAGIC,EAHJ,OAIgBJ,mBAAS,GAJzB,mBAITK,EAJS,KAICC,EAJD,OAKUN,oBAAS,GALnB,mBAKTO,EALS,KAKDC,EALC,KA+BhB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,eAAf,iBACA,yBACEA,UAAS,yBACNF,EAAuC,GAA9B,6BAEZvB,IAAKD,EAAOkB,GAAYZ,MACxBqB,IAAI,QAEN,wBAAID,UAAU,cAAc1B,EAAOkB,GAAYf,OAC/C,wBAAIuB,UAAU,UAAU1B,EAAOkB,GAAYd,QAC3C,wBAAIsB,UAAU,SAAS1B,EAAOkB,GAAYb,OAC1C,yBAAKqB,UAAU,wBACb,yBACEA,UAAU,cACVE,QAAS,kBAAMT,GAAeD,EAAa,GAAKlB,EAAO6B,UAEvD,kBAAC,IAAD,CAAiBC,KAAMC,OAEzB,yBAAKL,UAAU,oBAAoBE,QAvCZ,WACvBJ,EACFT,EAASiB,QAAQC,QAEjBlB,EAASiB,QAAQE,OAEnBT,GAASD,KAkCFA,EACC,kBAAC,IAAD,CAAiBM,KAAMK,MAEvB,kBAAC,IAAD,CAAiBL,KAAMM,OAG3B,yBACEV,UAAU,cACVE,QAAS,kBAAMT,GAAeD,EAAa,GAAKlB,EAAO6B,UAEvD,kBAAC,IAAD,CAAiBC,KAAMO,QAG3B,yBAAKX,UAAU,aACb,6BACGlB,EAAkBY,IAErB,kBAAC,IAAD,CACEkB,KAAK,IACLC,KAAMjB,EACNkB,EAAGpB,EACHqB,SApDuB,SAAC,GAAW,IAATD,EAAQ,EAARA,EAChCzB,EAASiB,QAAQZ,YAAcoB,EAC/BnB,EAAemB,GAEVhB,IACHC,GAAQ,GACRV,EAASiB,QAAQE,SA+CbQ,OAAQ,CACNC,MAAO,CACLC,gBAAiB,UACjBC,OAAQ,SACRC,OAAQ,OAEVC,OAAQ,CACNH,gBAAiB,OACjBE,OAAQ,OAEVE,MAAO,CACLC,UAAW,MACXC,MAAO,MACPJ,OAAQ,OACRF,gBAAiB,OACjBO,aAAc,MAIpB,6BACG3C,EAAkBc,KAIvB,2BACE8B,IAAKrC,EACLd,IAAKD,EAAOkB,GAAYjB,IACxBoD,aA9FmB,WACvB9B,EAAYR,EAASiB,QAAQV,UACzBE,GAAQT,EAASiB,QAAQE,QA6FzBoB,aAAc,kBAAMjC,EAAeN,EAASiB,QAAQZ,cACpDmC,QAAS,kBAAM9B,GAAQ,QCvGX+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B7E,EAAOC,QAAU,IAA0B,kD","file":"static/js/main.df2264ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/KnockinOnHeavenDoor.51d62804.mp3\";","import KnockinOnHeavenDoor from './KnockinOnHeavenDoor.mp3'\nimport * as Covers from '../covers'\nconst audios = [\n\n  {\n    src: KnockinOnHeavenDoor,\n    title: \"Knockin' On Heaven's Door\",\n    artist: \"Bob Dylan\",\n    album: \"Pat Garrett & Billy The Kid (Soundtrack From The Motion Picture)\",\n    cover: Covers.KnockinOnHeavenDoor\n  },\n];\n\nexport default audios;","const constructTimeMMSS = (timeElapsed) => {\n  let minute = Math.floor(timeElapsed / 60);\n  let second = Math.floor(timeElapsed - 60 * minute);\n  return `${minute < 10 ? \"0\" + minute : minute} : ${\n    second < 10 ? \"0\" + second : second\n  }`;\n};\nexport { constructTimeMMSS };\n","import React, { useState, useRef } from \"react\";\nimport TimeSlider from \"react-input-slider\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./App.scss\";\nimport {\n  faForward,\n  faBackward,\n  faPauseCircle,\n  faPlayCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport audios from \"./audios\";\nimport {  constructTimeMMSS } from \"./helpers/timer\";\nconst App = () => {\n  const audioRef = useRef();\n  const [audioIndex, setAudioIndex] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isPlay, setPlay] = useState(false);\n\n  const handleLoadedData = () => {\n    setDuration(audioRef.current.duration);\n    if (isPlay) audioRef.current.play();\n  };\n\n  const handlePausePlayClick = () => {\n    if (isPlay) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setPlay(!isPlay);\n  };\n\n  const handleTimeSliderChange = ({ x }) => {\n    audioRef.current.currentTime = x;\n    setCurrentTime(x);\n\n    if (!isPlay) {\n      setPlay(true);\n      audioRef.current.play();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Now-Playing\">Now playing :</div>\n      <img\n        className={`Song-Thumbnail ${\n          !isPlay ? \"Song-Thumbnail-Spin-Pause\" : \"\"\n        }`}\n        src={audios[audioIndex].cover}\n        alt=\"tet\"\n      />\n      <h2 className=\"Song-Title\">{audios[audioIndex].title}</h2>\n      <h3 className=\"Singer\">{audios[audioIndex].artist}</h3>\n      <h4 className=\"Album\">{audios[audioIndex].album}</h4>\n      <div className=\"Control-Button-Group\">\n        <div\n          className=\"Prev-Button\"\n          onClick={() => setAudioIndex((audioIndex - 1) % audios.length)}\n        >\n          <FontAwesomeIcon icon={faBackward} />\n        </div>\n        <div className=\"Pause-Play-Button\" onClick={handlePausePlayClick}>\n          {isPlay ? (\n            <FontAwesomeIcon icon={faPauseCircle} />\n          ) : (\n            <FontAwesomeIcon icon={faPlayCircle} />\n          )}\n        </div>\n        <div\n          className=\"Next-Button\"\n          onClick={() => setAudioIndex((audioIndex + 1) % audios.length)}\n        >\n          <FontAwesomeIcon icon={faForward} />\n        </div>\n      </div>\n      <div className=\"Seek-Area\">\n        <div>\n          {constructTimeMMSS(currentTime)}\n        </div>\n        <TimeSlider\n          axis=\"x\"\n          xmax={duration}\n          x={currentTime}\n          onChange={handleTimeSliderChange}\n          styles={{\n            track: {\n              backgroundColor: \"#03151f\",\n              margin: \"0 10px\",\n              height: \"3px\",\n            },\n            active: {\n              backgroundColor: \"#333\",\n              height: \"3px\",\n            },\n            thumb: {\n              marginTop: \"0px\",\n              width: \"8px\",\n              height: \"10px\",\n              backgroundColor: \"#333\",\n              borderRadius: 0,\n            },\n          }}\n        />\n        <div>\n          {constructTimeMMSS(duration)}\n        </div>\n      </div>\n\n      <audio\n        ref={audioRef}\n        src={audios[audioIndex].src}\n        onLoadedData={handleLoadedData}\n        onTimeUpdate={() => setCurrentTime(audioRef.current.currentTime)}\n        onEnded={() => setPlay(false)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/KnockinOnHeavenDoor.7814f69e.jpg\";"],"sourceRoot":""}